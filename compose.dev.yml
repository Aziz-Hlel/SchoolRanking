version: '3.8'

services:
  # Database Service
  db:
    image: postgres:15-alpine
    container_name: schoolranking-db-dev
    restart: unless-stopped  # More professional than "always"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Optional: Add init scripts
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: schoolranking-backend-dev
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/schoolranking_dev
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
    volumes:
      # Volume mount for hot reload - critical for development
      - ./backend/src:/app/src
      - ./backend/pom.xml:/app/pom.xml
      # Maven cache to avoid re-downloading dependencies
      - maven-cache:/root/.m2
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: schoolranking-frontend-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      # Volume mount for hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      # Prevent node_modules from being overwritten
      - /app/node_modules
    environment:
      VITE_API_URL : ${VITE_API_URL}
      VITE_NODE_ENV : ${VITE_NODE_ENV}
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  maven-cache:
    driver: local